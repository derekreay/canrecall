value[i] <- predict(model, newdata = test, type = "response")
}
for(i in nrow(new_df)){
test <- new_df[i,]
train <- new_df[-i,]
model <- glm(train$resp ~ train$PC1 + train$PC2, family = "binomial")
value[i] <- predict(model, newdata = test, type = "response")
}
View(test)
View(model)
model <- glm(resp ~ PC1 + PC2, ata = train, family = "binomial")
model <- glm(resp ~ PC1 + PC2, data = train, family = "binomial")
value <- NULL
for(i in nrow(new_df)){
test <- new_df[i,]
train <- new_df[-i,]
model <- glm(resp ~ PC1 + PC2, data = train, family = "binomial")
value[i] <- predict(model, newdata = test, type = "response")
}
LogLoss(value, car93_2$Type)
car93_2 <- car93
# which( colnames(car93)=="Type")
car93_2$small <- as.integer(grepl('Small', car93_2$Type))
car93_2$small<-as.factor(car93_2$small)
new_df = as.data.frame(pca_car$x[,c(1,2)])
new_df$resp<-car93_2$small
value <- NULL
for(i in nrow(new_df)){
test <- new_df[i,]
train <- new_df[-i,]
model <- glm(resp ~ PC1 + PC2, data = train, family = "binomial")
value[i] <- predict(model, newdata = test, type = "response")
}
LogLoss(value, new_df$Type)
value
View(test)
View(train)
LogLoss(value, new_df$resp)
value
new_df$PC1
new_df$PC2
new_df$resp
train$resp
value <- NULL
for(i in nrow(new_df)){
test <- new_df[i,]
train <- new_df[-i,]
model <- glm(resp ~ PC1 + PC2, data = train, family = "binomial")
value[i] <- predict(model, newdata = test, type = "response")
print(value[i])
}
value <- NULL
for(i in nrow(new_df)){
test <- new_df[i,]
train <- new_df[-i,]
model <- glm(resp ~ PC1 + PC2, data = train, family = "binomial")
value[i] <- predict(model, newdata = test, type = "response")
print(i)
}
value <- NULL
for(i in nrow(new_df)){
test <- new_df[i,]
train <- new_df[-i,]
model <- glm(resp ~ PC1 + PC2, data = train, family = "binomial")
value[i] <- predict(model, newdata = test, type = "response")
message(i)
}
for(i in nrow(new_df)){
print(i)
test <- new_df[i,]
train <- new_df[-i,]
model <- glm(resp ~ PC1 + PC2, data = train, family = "binomial")
value[i] <- predict(model, newdata = test, type = "response")
}
predict(model, newdata = new_df[1], type = "response")
new_df
new_df$PC2
predict(model, newdata = new_df[1,], type = "response")
predict(model, newdata = new_df[1,1:3], type = "response")
predict(model, newdata = new_df[1], type = "response")
predict(model, newdata = new_df, type = "response")
new_df
class(new_df)
View(new_df)
new_df$PC1
new_df
new_df[1,]
predict(model, newdata = new_df[1,], type = "response")
predict(model, newdata = new_df, type = "response")
predict(model, newdata = test, type = "response")
predict(model, newdata = new_df[2,], type = "response")
model <- glm(resp ~ PC1 + PC2, data = new_df[-25,], family = "binomial")
predict(model, newdata = new_df[2,], type = "response")
predict(model, newdata = new_df[25,], type = "response")
test = newdf[25,]
test = new_df[25,]
predict(model, newdata = test, type = "response")
test = new_df[25,]
predict(model, newdata = test, type = "response")
model <- glm(resp ~ PC1 + PC2, data = new_df[-25,], family = "binomial")
test = new_df[25,]
predict(model, newdata = test, type = "response")
new_df[-25,]
value <- NULL
for(i in nrow(new_df)){
test <- new_df[i,]
train <- new_df[-i,]
model <- glm(resp ~ PC1 + PC2, data = train, family = "binomial")
value[i] <- predict(model, newdata = test, type = "response")
}
value <- NULL
for(i in nrow(new_df)){
test <- new_df[i,]
train <- new_df[-i,]
model <- glm(resp ~ PC1 + PC2, data = train, family = "binomial")
value[i] <- predict(model, newdata = test, type = "response")
}
value <- vector())
value <- vector()
for(i in nrow(new_df)){
test <- new_df[i,]
train <- new_df[-i,]
model <- glm(resp ~ PC1 + PC2, data = train, family = "binomial")
value[i] <- predict(model, newdata = test, type = "response")
}
value <- NULL
for(i in nrow(new_df)){
test <- new_df[i,]
train <- new_df[-i,]
model <- glm(resp ~ PC1 + PC2, data = train, family = "binomial")
value[i] <- predict(model, newdata = test, type = "response")
}
carlda <- lda(car93_2$Type~pca_car$x[,1] + pca_car$x[,2], CV=TRUE)
table(car93_2$Type, carlda$class)
LogLoss(carlda$posterior[,2], as.numeric(car93_2$Type)-1)
carlda <- lda(resp ~ PC1 + PC2, data = train, CV=TRUE)
table(car93_2$Type, carlda$class)
carlda <- lda(resp ~ PC1 + PC2, data = new_df, CV=TRUE)
table(car93_2$Type, carlda$class)
table(new_df$resp, carlda$class)
carlda
LogLoss(carlda$posterior[,2], as.numeric(car93_2$Type)-1)
LogLoss(carlda$posterior[,2], as.numeric(new_df$resp)-1)
car93_3 <- car93[,-c(1:2)]
carlda2 <- lda(Type~., data=car93_3, CV=TRUE)
table(car93$Type, carlda2$class)
carlda2$posterior
table(car93$Type, carlda2$class)
MultiLogLoss(carlda2$posterior, as.numeric(car93$Type)-1)
library(nnet)
View(sfish)
findex <- sample(1:nrow(sfish), nrow(sfish)/2)
for(i in 1:5){
nnfishtr <- nnet(X3.770~., data=ftrain, size=i, trace=FALSE)
print(paste("Number of hidden layer variables:", i))
print(table(ftest[,25], predict(nnfishtr, newdata=ftest[,-25], type="class")))
}
findex <- sample(1:nrow(sfish), nrow(sfish)/2)
ftrain <- sfish[findex,]
ftest <- sfish[-findex,]
for(i in 1:5){
nnfishtr <- nnet(X3.770~., data=ftrain, size=i, trace=FALSE)
print(paste("Number of hidden layer variables:", i))
print(table(ftest[,25], predict(nnfishtr, newdata=ftest[,-25], type="class")))
}
for(i in 1:5){
nnfishtr <- nnet(X3.770~., data=ftrain, size=i, trace=FALSE)
print(paste("Number of hidden layer variables:", i))
print(table(ftest[,7], predict(nnfishtr, newdata=ftest[,-7], type="class")))
}
print(table(ftest[,7], predict(nnfishtr, newdata=ftest[,-7])))
for(i in 1:5){
nnfishtr <- nnet(X3.770~., data=ftrain, size=i, trace=FALSE)
print(paste("Number of hidden layer variables:", i))
print(table(ftest[,7], predict(nnfishtr, newdata=ftest[,-7])))
}
for(i in 1:5){
nnfishtr <- nnet(X3.770~., data=ftrain, size=i, trace=FALSE)
print(paste("Number of hidden layer variables:", i))
print(table(ftest[,7], predict(nnfishtr, newdata=ftest[,-7], type = "class")))
}
nnfishtr <- nnet(actor(X3.770)~., data=ftrain, size=i, trace=FALSE)
f
nnfishtr <- nnet(factor(X3.770)~., data=ftrain, size=i, trace=FALSE)
for(i in 1:5){
nnfishtr <- nnet(factor(X3.770)~., data=ftrain, size=i, trace=FALSE)
print(paste("Number of hidden layer variables:", i))
print(table(ftest[,7], predict(nnfishtr, newdata=ftest[,-7], type = "class")))
}
ftest
ftest[,7]
ftest[,-7]
?predict
for(i in 1:5){
nnfishtr <- nnet(X3.770~., data=ftrain, size=i, trace=FALSE)
print(paste("Number of hidden layer variables:", i))
print(table(ftest[,7], predict(nnfishtr, newdata=ftest[,-7], type = "response")))
}
print(table(ftest[,7], predict(nnfishtr, newdata=ftest[,-7], type = "raw")))
for(i in 1:5){
nnfishtr <- nnet(as.factor(X3.770)~., data=ftrain, size=i, trace=FALSE)
print(paste("Number of hidden layer variables:", i))
print(table(ftest[,7], predict(nnfishtr, newdata=ftest[,-7], type = "class")))
}
for(i in 1:5){
nnfishtr <- nnet(factor(X3.770)~., data=ftrain, size=i, trace=FALSE)
print(paste("Number of hidden layer variables:", i))
print(table(ftest[,7], predict(nnfishtr, newdata=ftest[,-7], type = "class")))
}
for(i in 1:10){
nnbodtr <- nnet(factor(Gender)~., data=btrain, size=i, trace=FALSE)
print(paste("Number of hidden layer variables:", i))
print(table(btest[,25], predict(nnbodtr, newdata=btest[,-25], type="class")))
}
ftest
nrow(sfish)
findex <- sample(1:nrow(sfish), 907)
ftrain <- sfish[findex,]
ftest <- sfish[-findex,]
for(i in 1:5){
nnfishtr <- nnet(factor(X3.770)~., data=ftrain, size=i, trace=FALSE)
print(paste("Number of hidden layer variables:", i))
print(table(ftest[,7], predict(nnfishtr, newdata=ftest[,-7], type = "class")))
}
ftest
findex <- sample(1:nrow(sfish), 907)
ftrain <- sfish[findex,]
nrow(sbod)
findex <- sample(1:nrow(sfish), 250)
ftrain <- sfish[findex,]
ftest <- sfish[-findex,]
ftest
findex <- sample(1:nrow(sfish), 906)
ftrain <- sfish[findex,]
ftest <- sfish[-findex,]
ftest
bindex <- sample(1:nrow(sbod), 250)
btrain <- sbod[bindex,]
btest <- sbod[-bindex,]
findex <- sample(1:nrow(sfish), 450)
ftrain <- sfish[findex,]
ftest <- sfish[-findex,]
ftest
for(i in 1:5){
nnfishtr <- nnet(factor(X3.770)~., data=ftrain, size=i, trace=FALSE)
print(paste("Number of hidden layer variables:", i))
print(table(ftest[,7], predict(nnfishtr, newdata=ftest[,-7], type = "class")))
}
btest[,25]
nnbodtr
View(btest)
print(table(ftest[,7], predict(nnfishtr, newdata=ftest[,-7])))
for(i in 1:5){
nnfishtr <- nnet(X3.770~., data=ftrain, size=i, trace=FALSE)
print(paste("Number of hidden layer variables:", i))
print(table(ftest[,7], predict(nnfishtr, newdata=ftest[,-7])))
}
sum((sfish$X3.770 - nn$net.result)^2)/nrow(test)
nn$net.result
sfish$X3.770 - nn$net.result
nn$net.result[1]
sum((sfish$X3.770 - nn$net.result[1])^2)/nrow(test)
sum((sfish$X3.770 - nn$net.result[[1]])^2)/nrow(test)
sum((sfish$X3.770 - as.numeric(nn$net.result)^2)/nrow(test)
sum((sfish$X3.770 - as.numeric(nn$net.result))^2)/nrow(test)
sfish$X3.770 - as.numeric(nn$net.result
sfish$X3.770 - as.numeric(nn$net.result)
sfish$X3.770 - as.numeric(nn$net.result)
sum((sfish$X3.770 - as.numeric(nn$net.result[1]))^2)/nrow(test)
nn$net.result
as.data.frame(nn$net.result)
sum((sfish$X3.770 - as.data.frame(nn$net.result))^2)/nrow(test)
sfish$X3.770
sfish$X3.770
nn$net.result[[1]]
sum((sfish$X3.770 - nn$net.result[[1]])^2)/nrow(test)
set.seed(217, sample.kind="Rounding")
ind <- sample(1:nrow(sfish), 454)
train <- sfish[ind,]
test <- sfish[-ind,]
nn <- neuralnet(X3.770 ~ ., data=train, hidden=5)
nn <- neuralnet(X3.770 ~ ., data=train, hidden=5)
nnet
pr.nn <- compute(nn,
nnet
pr.nn <- compute(nn,
pr.nn <- compute(nn,test)
sum((test$X3.770 - pr.nn$net.result)^2)/nrow(test)
set.seed(217, sample.kind="Rounding")
ind <- sample(1:nrow(sfish), 454)
train <- sfish[ind,]
test <- sfish[-ind,]
nn <- neuralnet(X3.770 ~ ., data=train, hidden=5)
nn <- neuralnet(X3.770 ~ ., data=train, hidden=5)
pr.nn <- compute(nn,test)
sum((test$X3.770 - pr.nn$net.result)^2)/nrow(test)
pr.nn_ <- pr.nn$net.result*(max(sfish$X3.770)-min(sfish$X3.770))+min(sfish$X3.770)
test.r <- (test$X3.770)*(max(sfish$X3.770)-min(sfish$X3.770))+min(sfish$X3.770)
sum((test.r - pr.nn_)^2)/nrow(test)
lm.fit <- lm(X3.770~., data=train)
summary(lm.fit)
summary(lm.fit)
pr.lm <- predict(lm.fit,test)
pr.lm <- predict(lm.fit,test)
sum((pr.lm - test$X3.770)^2)/nrow(test)
nnfishtr$n
nnfishtr$value
?nnet
nnfishtr$fitted.values
for(i in 1:5){
nnfishtr <- nnet(X3.770~., data=ftrain, size=i, trace=FALSE)
print(paste("Number of hidden layer variables:", i))
print(mean((sfish$X3.770-nnfishtr$fittedvalues)^2))
}
for(i in 1:5){
nnfishtr <- nnet(X3.770~., data=ftrain, size=i, trace=FALSE)
print(paste("Number of hidden layer variables:", i))
print(mean((ftrain$X3.770-nnfishtr$fittedvalues)^2))
}
for(i in 1:5){
nnfishtr <- nnet(X3.770~., data=ftrain, size=i, trace=FALSE)
print(paste("Number of hidden layer variables:", i))
print(mean((sfish$X3.770-nnfishtr$fitted.values)^2))
}
for(i in 1:5){
nnfishtr <- nnet(X3.770~., data=ftrain, size=i, trace=FALSE)
print(paste("Number of hidden layer variables:", i))
print(mean((ftest$X3.770-nnfishtr$fitted.values)^2))
}
print(mean((ftrain$X3.770-nnfishtr$fitted.values)^2))
for(i in 1:5){
nnfishtr <- nnet(X3.770~., data=ftrain, size=i, trace=FALSE)
print(paste("Number of hidden layer variables:", i))
print(mean((ftrain$X3.770-nnfishtr$fitted.values)^2))
}
pr.nn <- compute(nnfishtr,ftest)
pr.nn <- compute(nnfishtr,ftest)
pr.nn <- predict(nnfishtr,ftest)
for(i in 1:5){
nnfishtr <- nnet(X3.770~., data=ftrain, size=i, trace=FALSE)
pr.nn <- predict(nnfishtr,ftest)
print(paste("Number of hidden layer variables:", i))
print(mean((ftest$X3.770-pr.nn$fitted.values)^2))
}
pr.nn
print(mean((ftest$X3.770-pr.nn$)^2))
for(i in 1:5){
nnfishtr <- nnet(X3.770~., data=ftrain, size=i, trace=FALSE)
pr.nn <- predict(nnfishtr,ftest)
print(paste("Number of hidden layer variables:", i))
print(mean((ftest$X3.770-pr.nn)^2))
}
set.seed(217, sample.kind="Rounding")
train <- sfish[ind,]
test <- sfish[-ind,]
nn <- neuralnet(X3.770 ~ ., data=train, hidden=5)
nn <- neuralnet(X3.770 ~ ., data=train, hidden=5)
pr.nn <- compute(nn,test)
sum((test$X3.770 - pr.nn$net.result)^2)/nrow(test)
set.seed(217, sample.kind="Rounding")
pr.nn_ <- pr.nn$net.result*(max(sfish$X3.770)-min(sfish$X3.770))+min(sfish$X3.770)
test.r <- (test$X3.770)*(max(sfish$X3.770)-min(sfish$X3.770))+min(sfish$X3.770)
sum((test.r - pr.nn_)^2)/nrow(test)
set.seed(217, sample.kind="Rounding")
train <- sfish[ind,]
test <- sfish[-ind,]
nn <- neuralnet(X3.770 ~ ., data=train, hidden=5)
nn <- neuralnet(X3.770 ~ ., data=train, hidden=5)
pr.nn <- compute(nn,test)
pr.nn <- compute(nn,test)
sum((test$X3.770 - pr.nn$net.result)^2)/nrow(test)
set.seed(217, sample.kind="Rounding")
pr.nn_ <- pr.nn$net.result*(max(sfish$X3.770)-min(sfish$X3.770))+min(sfish$X3.770)
test.r <- (test$X3.770)*(max(sfish$X3.770)-min(sfish$X3.770))+min(sfish$X3.770)
sum((test.r - pr.nn_)^2)/nrow(test)
test.r
test$X3.770
test.r - test$X3.770
(test$X3.770)*(max(sfish$X3.770)-min(sfish$X3.770))+min(sfish$X3.770)
(test$X3.770)
(max(sfish$X3.770)-min(sfish$X3.770))+min(sfish$X3.770)
pr.nn_ <- pr.nn$net.result*(max(fishdata$X3.770)-min(fishdata$X3.770))+min(fishdata$X3.770)
test.r <- (fishdata$X3.770)*(max(fishdata$X3.770)-min(fishdata$X3.770))+min(fishdata$X3.770)
test.r - test$X3.770
sum((test.r - pr.nn_)^2)/nrow(test)
test.r <- (test$X3.770)*(max(fishdata$X3.770)-min(fishdata$X3.770))+min(fishdata$X3.770)
test.r <- (test$X3.770)*(max(fishdata$X3.770)-min(fishdata$X3.770))+min(fishdata$X3.770)
sum((test.r - pr.nn_)^2)/nrow(test)
sum((test.r - pr.nn_)^2)/nrow(test.r)
sum((test.r - pr.nn_)^2)/nrow(test)
set.seed(217, sample.kind="Rounding")
nn <- neuralnet(X3.770 ~ ., data=train, hidden=5, linear.output = TRUE)
nn <- neuralnet(X3.770 ~ ., data=train, hidden=5, linear.output = TRUE)
pr.nn <- compute(nn,test)
sum((test$X3.770 - pr.nn$net.result)^2)/nrow(test)
nn <- neuralnet(X3.770 ~ ., data=train, hidden=5)
nn <- neuralnet(X3.770 ~ ., data=train, hidden=5)
pr.nn <- compute(nn,test)
sum((test$X3.770 - pr.nn$net.result)^2)/nrow(test)
nn <- neuralnet(X3.770 ~ ., data=train, hidden=6, act.fct = 'logistic')
nn <- neuralnet(X3.770 ~ ., data=train, hidden=6, act.fct = 'logistic')
pr.nn <- compute(nn,test)
sum((test$X3.770 - pr.nn$net.result)^2)/nrow(test)
value <- NULL
for(i in nrow(new_df)){
test <- new_df[i,]
train <- new_df[-i,]
model <- glm(resp ~ PC1 + PC2, data = train, family = "binomial")
value[i] <- predict(model, newdata = test, type = "response")
break
}
model
for(i in 1:nrow(new_df)){
test <- new_df[i,]
train <- new_df[-i,]
model <- glm(resp ~ PC1 + PC2, data = train, family = "binomial")
value[i] <- predict(model, newdata = test, type = "response")
}
LogLoss(value, new_df$resp)
value
newdf$resp
new_df$resp
LogLoss(value, new_df$resp)
LogLoss(value, as.numeric(new_df$resp))
LogLoss(value, as.numeric(factor(new_df$resp))-1)
factor(new_df$resp))
factor(new_df$resp))
factor(new_df$resp)
as.numeric(factor(new_df$resp))
as.numeric(factor(new_df$resp))-1
LogLoss(value, as.numeric(new_df$resp))
as.numeric(new_df$resp)
LogLoss(value, as.numeric(new_df$resp)-1)
findex <- sample(1:nrow(sfish), 450)
ftrain <- sfish[findex,]
ftest <- sfish[-findex,]
for(i in 1:5){
nnfishtr <- nnet(X3.770~., data=ftrain, size=i, trace=FALSE)
pr.nn <- predict(nnfishtr,ftest)
print(paste("Number of hidden layer variables:", i))
print(mean((ftest$X3.770-pr.nn)^2))
}
sum((test$X3.770 - pr.nn$net.result)^2)/nrow(test)
sum((test$X3.770 - pr.nn)^2)/nrow(test)
sum((ftest$X3.770 - pr.nn)^2)/nrow(test)
mean((ftest$X3.770 - pr.nn)^2))
mean((ftest$X3.770 - pr.nn)^2)
set.seed(217, sample.kind="Rounding")
nn <- neuralnet(X3.770 ~ ., data=train, hidden=5, linear.output = TRUE)
set.seed(217, sample.kind="Rounding")
ind <- sample(1:nrow(sfish), 454)
train <- sfish[ind,]
test <- sfish[-ind,]
nn <- neuralnet(X3.770 ~ ., data=train, hidden=5)
nn <- neuralnet(X3.770 ~ ., data=train, hidden=5)
pr.nn <- compute(nn,test)
sum((test$X3.770 - pr.nn$net.result)^2)/nrow(test)
nn <- neuralnet(X3.770 ~ ., data=train, hidden=5, linear.output = TRUE)
pr.nn <- compute(nn,test)
sum((test$X3.770 - pr.nn$net.result)^2)/nrow(test)
nn <- neuralnet(X3.770 ~ ., data=train, hidden=5)
pr.nn <- compute(nn,test)
sum((test$X3.770 - pr.nn$net.result)^2)/nrow(test)
nn <- neuralnet(X3.770 ~ ., data=train, hidden=6, act.fct = 'logistic')
pr.nn <- compute(nn,test)
sum((test$X3.770 - pr.nn$net.result)^2)/nrow(test)
set.seed(217, sample.kind="Rounding")
nn <- neuralnet(X3.770 ~ ., data=train, hidden=5, linear.output = TRUE)
pr.nn <- compute(nn,test)
#Linear
sum((test$X3.770 - pr.nn$net.result)^2)/nrow(test)
nn <- neuralnet(X3.770 ~ ., data=train, hidden=5)
pr.nn <- compute(nn,test)
# original
sum((test$X3.770 - pr.nn$net.result)^2)/nrow(test)
nn <- neuralnet(X3.770 ~ ., data=train, hidden=6, act.fct = 'logistic')
nn <- neuralnet(X3.770 ~ ., data=train, hidden=6, act.fct = 'logistic')
pr.nn <- compute(nn,test)
# 6 layers
sum((test$X3.770 - pr.nn$net.result)^2)/nrow(test)
set.seed(217, sample.kind="Rounding")
nn <- neuralnet(X3.770 ~ ., data=train, hidden=5, linear.output = TRUE)
pr.nn <- compute(nn,test)
#Linear
MSElinear <- sum((test$X3.770 - pr.nn$net.result)^2)/nrow(test)
nn <- neuralnet(X3.770 ~ ., data=train, hidden=5)
pr.nn <- compute(nn,test)
# original
MSEq2 <- sum((test$X3.770 - pr.nn$net.result)^2)/nrow(test)
nn <- neuralnet(X3.770 ~ ., data=train, hidden=6, act.fct = 'logistic')
nn <- neuralnet(X3.770 ~ ., data=train, hidden=6, act.fct = 'logistic')
pr.nn <- compute(nn,test)
# 6 layers
MSE6 <- sum((test$X3.770 - pr.nn$net.result)^2)/nrow(test)
nn <- neuralnet(X3.770 ~ ., data=train, hidden=6, act.fct = 'logistic')
pr.nn <- compute(nn,test)
MSE6 <- sum((test$X3.770 - pr.nn$net.result)^2)/nrow(test)
pr.nn_ <- pr.nn$net.result*(max(fishdata$X3.770)-min(fishdata$X3.770))+min(fishdata$X3.770)
test.r <- (test$X3.770)*(max(fishdata$X3.770)-min(fishdata$X3.770))+min(fishdata$X3.770)
MSE6_u <- sum((test.r - pr.nn_)^2)/nrow(test)
nn <- neuralnet(X3.770 ~ ., data=train, hidden=5)
pr.nn <- compute(nn,test)
MSEq2 <- sum((test$X3.770 - pr.nn$net.result)^2)/nrow(test)
pr.nn_ <- pr.nn$net.result*(max(fishdata$X3.770)-min(fishdata$X3.770))+min(fishdata$X3.770)
test.r <- (test$X3.770)*(max(fishdata$X3.770)-min(fishdata$X3.770))+min(fishdata$X3.770)
MSEq2_u <- sum((test.r - pr.nn_)^2)/nrow(test)
nn <- neuralnet(X3.770 ~ ., data=train, hidden=5, linear.output = TRUE)
pr.nn <- compute(nn,test)
MSElinear <- sum((test$X3.770 - pr.nn$net.result)^2)/nrow(test)
pr.nn_ <- pr.nn$net.result*(max(fishdata$X3.770)-min(fishdata$X3.770))+min(fishdata$X3.770)
test.r <- (test$X3.770)*(max(fishdata$X3.770)-min(fishdata$X3.770))+min(fishdata$X3.770)
MSElinear_u <- sum((test.r - pr.nn_)^2)/nrow(test)
